// ============================================================
// üß© √ÜFINGAR ‚Äî Arrays, Objects, Methods & Destructuring
// (Stigvaxandi: l√©ttar ‚ûú mi√∞lungs ‚ûú sm√° challenge)
// ============================================================

// ====== Grunn-g√∂gn sem m√° nota √≠ √¶fingum (valfrj√°lst) ======
const nums = [3, 7, 1, 9, 4];
const colors = ['red', 'green', 'blue', 'green'];
const user = { name: 'Anna', age: 25, city: 'Reykjav√≠k' };
const users = [
  { name: 'Jon', age: 30, scores: [7, 9, 8] },
  { name: 'Sara', age: 22, scores: [10, 9, 9] },
  { name: 'Aron', age: 27, scores: [6, 7, 7] },
];

// ===============
// üü¢ 1. √ûrep
// ===============

// 1) B√¶ttu t√∂lunni 5 aftan vi√∞ nums me√∞ .push()
//    og logga√∞u lengdina (length).

nums.push(5)
console.log(nums)
console.log(nums.length)


// 2) Fjarl√¶g√∞u s√≠√∞asta litinn √≠ colors me√∞ .pop()
//    og logga√∞u n√Ωja listann.

nums.pop(6)
console.log(nums)

// 3) B√¶ttu "yellow" fremst √≠ colors me√∞ .unshift().
colors.unshift("yellow")
console.log(colors)

// 4) Er "blue" √≠ colors? Nota√∞u .includes() og logga√∞u true/false.

console.log(colors.includes("blue"))

// 5) Finndu index af "green" me√∞ .indexOf().
console.log(colors.indexOf("green"))

// 6) B√∫√∞u til object person me√∞ properties name og hobby
//    og logga√∞u b√¶√∞i me√∞ dot-notation.

let person={name:"Sigga",hobby:"dans"}

console.log(person.name)
console.log(person.hobby)

// 7) Object destructuring: Drag√∞u name og city √∫r user
//    og prenta√∞u "Anna b√Ωr √≠ Reykjav√≠k".
console.log(user.name," b√Ωr √≠ ",user.city)


// 8) Array destructuring: Drag√∞u fyrstu tv√¶r t√∂lur √∫r nums √≠ breytur a og b
//    og prenta√∞u summu √æeirra.

let a=nums[0]
let b=nums[1]
console.log(a+b)

// 9) B√∫√∞u til n√Ωtt array doubleNums sem er nums * 2 me√∞ .map().
let doubleNums = nums.map((n) => n * 2);
console.log(doubleNums)
// 10) S√≠a√∞u a√∞eins t√∂lur > 5 √∫r nums √≠ newNums me√∞ .filter().
let newNums = nums.filter((n) => n > 5);
console.log(newNums)
// ==================
// üü° 2. √ûrep
// ==================

// 11) Finn√∞u fyrsta notanda > 25 √°ra √≠ users me√∞ .find().

// 12) √ör users: b√∫√∞u til array af n√∂fnum me√∞ .map() og destructuring
//     √≠ callback: ({ name }) => name.

// 13) Reikna√∞u summu allra talna √≠ nums me√∞ .reduce().

// 14) B√∫√∞u til fall getAverage(scoresArray) sem skilar me√∞altali.
//     Pr√≥fa√∞u √° users[0].scores.

// 15) B√∫√∞u til n√Ωtt array highScorers √æar sem me√∞altal(scores) > 8
//     (nota√∞u .filter() + getAverage).

// 16) √ör users: b√∫√∞u til array objects { name, avg }
//     me√∞ .map() og destructuring + getAverage.

// 17) B√¶ttu methodi vi√∞ object userCopy sem heitir greet()
//     og prentar "H√¶, √©g heiti Anna". Kalla√∞u √° √æa√∞.
//     (Haf√∞u userCopy sem spread af user svo √æ√∫ breytir ekki upprunalega)

// 18) Sameina√∞u tv√∂ array: nums og [10, 11] √≠ combined me√∞ spread syntax.

// 19) Fjarl√¶g√∞u tv√≠tekin gildi √∫r colors (t.d. "green") me√∞ Set
//     og spread ‚Äî f√°√∞u uniqueColors.

// 20) Sortera√∞u afrit af nums √≠ h√¶kkandi r√∂√∞ √°n √æess a√∞ breyta nums.
//     (nota√∞u [...nums].sort((a,b)=>a-b)).

// ===================
// üü† 3. √ûrep
// ===================

// 21) B√∫√∞u til fall addUser(list, newUser) sem skilar N√ùJU array
//     me√∞ n√Ωja notandanum b√¶ttum vi√∞ (immutability).
//     Pr√≥fa√∞u addUser(users, { name: "Eva", age: 24, scores: [8,8,9] }).

// 22) Ger√∞u "lookup" object √∫r users √æar sem lykill er name og gildi er age
//     me√∞ .reduce(). D√¶mi: { Jon: 30, Sara: 22, Aron: 27 }

// 23) Nota√∞u nested destructuring til a√∞ n√° √≠ fyrstu tv√¶r einkunnir
//     hj√° fyrsta notanda: const [{ scores: [s1, s2] }] = users.

// 24) B√∫√∞u til fall labelUser(u) sem notar destructuring √≠ parameter:
//     function labelUser({ name, age }) { ... } og skilar streng
//     "Jon (30 √°ra)".

// 25) √ör users: b√∫√∞u til array af strengjum "Nafn ‚Äì Me√∞altal: X.YY"
//     (me√∞ .map(), getAverage og .toFixed(2)).

// 26) Nota√∞u .every() til a√∞ athuga hvort ALLIR notendur s√©u ‚â• 18 √°ra.

// 27) Nota√∞u .some() til a√∞ athuga hvort EINHVER hafi me√∞altal > 9.

// 28) Flatti√∞ √∫t tv√≠v√≠tt array me√∞ .flat():
//     const matrix = [[1,2],[3,4],[5]];
//     f√°√∞u [1,2,3,4,5].

// 29) Nota√∞u .flatMap() √° users til a√∞ f√° "flatan" lista af √∂llum scores
//     (t.d. [7,9,8,10,9,9,6,7,7]).

// 30) B√∫√∞u til frequency-count af litum √≠ colors:
//     √ötkoma t.d. { red: 1, green: 2, blue: 1 } me√∞ .reduce().

// 31) H√≥pa√∞u users eftir √æv√≠ hvort avg ‚â• 8 e√∞a ekki:
//     √ötkoma: { passed: [ ... ], others: [ ... ] } (reduce + skilyr√∞i).

// 32) Sni√∞ugt destructuring-trix: √ûegar property vantar
//     settu default gildi:
//     const { nickname = "No nickname" } = user;
//     Prenta√∞u nickname.

// 33) Endursk√Ωra property vi√∞ destructuring (rename):
//     const { city: hometown } = user; prenta√∞u hometown.

// 34) Sker√∞u √∫t fyrsta og s√≠√∞asta element √∫r nums me√∞ rest:
//     const [first, ...middle] = nums; // ... s√≠√∞an s√≠√∞asta √∫r middle

// 35) Sm√≠√∞a ‚Äûimmutable update‚Äú:
//     Uppf√¶r√∞u age hj√° "Aron" √≠ N√ùJU array √°n √æess a√∞ breyta uppr. users
//     (map yfir users: ef name==="Aron" skilar√∞u n√Ωju objecti me√∞ breyttu age).

// 36) B√∫a til "top N" fall:
//     function topN(arr, n) ‚Äî tekur inn array af {name, avg} og skilar
//     fyrstu n eftir avg (desc). Nota√∞u sort √° afrit og slice.

// 37) Sameina g√∂gn √∫r tveimur arrays me√∞ .map():
//     const ids = [1,2,3]; const names = ["A","B","C"];
//     f√°√∞u [{id:1,name:"A"}, ...] ‚Äî nota√∞u index √≠ map.

// 38) Deep-nested destructuring:
//     const obj = { a: { b: { c: 42 } } };
//     N√°√∞u √≠ c √≠ einni l√≠nu me√∞ const { a: { b: { c } } } = obj;

// 39) Byggja "path picker":
//     function pickCity({ address: { city } = { city: "?" } }) { ... }
//     Pr√≥fa√∞u √° objecti me√∞/√°n address.

// 40) Endurteknar √¶fingar (hra√∞astrik):
//     - Sn√∫a nums vi√∞ (reverse) √° afriti
//     - S√¶kja s√≠√∞ustu 2 t√∂lur me√∞ slice(-2)
//     - Taka fyrstu 3 litina me√∞ slice(0,3)
//     - Sameina uniqueColors + ["purple"] √≠ n√Ωtt array
//     - B√∫a til object { min, max } √∫r nums me√∞ Math.min/Math.max + spread

// ============================
// üëè Gangi √æ√©r/ ykkur vel!
// ============================
